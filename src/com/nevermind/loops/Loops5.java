package com.nevermind.loops;

 /*  5. Даны числовой ряд и некоторое число е. Найти сумму тех членов ряда, модуль которых больше или равен
    заданному е. Общий член ряда имеет вид: an=1/(2^n)+1/(3^n) */

public class Loops5 {

    public static void main(String[] args) {

        double e = 1;

        //с помощью for
        double sum1;
        sum1 = loops5(e);
        System.out.println("Сумма членов ряда, которые больше е=" + e + " составит " + sum1);

//с помощью рекурсии
        double sum2;
        sum2 = loops5rec(e, 1);
        System.out.println("Сумма членов ряда, которые больше е=" + e + " составит " + sum2);
    }


    public static double loops5(double e) {
        //прогрессия является бесконечно убывающей, положительной на всей протяженности.
        // Поэтому при е<=0 сумма членов прогрессии может быть вычислена по формулам суммы ряда
        //http://www.mathprofi.ru/kak_naiti_summu_ryada.html

        if (e <= 0) {
            return rowSum();
        }
        //Если e>0 , то суммируем все члены ряда , которые больше е
        else {
            double sum;
            sum = 0;

            for (int n = 1; ; n++) {
                //вычисляем значение ряда при данном n
                double a = Math.pow(2, -n) + Math.pow(3, -n);
                //модуль не используем, т.к. число a всегда будет положительным

                //если а>=е добавляем а в общую сумму и продолжаем цикл
                if (a >= e) {
                    sum += a;
                } else {
                    //как только a станет меньше e, цикл закончится и вернет сумму
                    return sum;
                }
            }
        }
    }

    //реализация с помощью рекурсии
    public static double loops5rec(double e, int n) {
        //прогрессия является бесконечно убывающей, положительной на всей протяженности.
        // Поэтому при е<=0 сумма членов прогрессии может быть вычислена по формулам суммы ряда
        //http://www.mathprofi.ru/kak_naiti_summu_ryada.html
        if (e <= 0) {
            return rowSum();
        }
        //Если e>0 , то суммируем все члены ряда , которые больше е
        else {
            double a;
            //вычисляем a
            a = Math.pow(2, -n) + Math.pow(3, -n);
            //если а<e возвращаем 0, иначе сумма а и рекурсивного вызова функции с увеличением n на 1
            return a < e ? 0 : a + loops5rec(e, n + 1);
        }
    }

   // Функция для вычисления суммы всех членов ряда
    private static double rowSum() {
        double sum;
        //данный ряд состоит из двух рядов 1/(2^n) и 1/(3^n)

        //сумма ряда 1/(2^n)
        double s1;
        s1 = (1.0 / 2.0) / (1.0 - 1.0 / 2.0);

        //сумма ряда 1/(3^n)
        double s2;
        s2 = (1.0 / 3.0) / (1.0 - 1.0 / 3.0);

        //сумма ряда 1/(2^n)+1/(3^n)
        sum = s1 + s2;
        return sum;
    }
}
